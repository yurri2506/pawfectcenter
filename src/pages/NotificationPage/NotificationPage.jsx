
// import React, { useReducer } from "react";
// import { Button, Card, Col, Row } from "antd";
// import "./Notification.css"; // ƒê·∫£m b·∫£o CSS ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a t·∫°i ƒë√¢y
// import ProfileUser from "../MyOrderPage/UserProfile.jsx";
// import myAvatar from "../../assets/images/avatar.jpg";

// const initdata = [
//   {
//     id: 1,
//     img: "https://chiaki.vn/upload/news/content/2021/05/thuc-an-cho-cho-con-pedigree-jpg-1620290242-06052021153722.jpg",
//     title: "KI·ªÜN H√ÄNG ƒêANG TR√äN ƒê∆Ø·ªúNG V·∫¨N CHUY·ªÇN",
//     content: "üéâ Ki·ªán h√†ng ƒë√£ chuy·ªÉn th√†nh c√¥ng cho ƒë∆°n v·ªã v·∫≠n chuy·ªÉn. Shipper s·∫Ω s·ªõm li√™n h·ªá b·∫°n!",
//     read: false,
//   },
//   {
//     id: 2,
//     img: "https://i.pinimg.com/736x/21/b3/e6/21b3e6294c5c83008fdbb4cc7e0a17ac.jpg",
//     title: "NG√ÄY H·ªòI TH√ö C∆ØNG - ƒê·∫æN L√Ä C√ì QU√Ä",
//     content: "üì¢ V·ªõi v√¥ s·ªë gi·∫£m gi√°, quay s·ªë nh·∫≠n qu√† h√≥t h√≤n h·ªçn. C√≤n ch·∫ßn ch·ªù g√¨ kh√¥ng tham gia ngay!",
//     read: false,
//   },
//   {
//     id: 3,
//     img: "https://img.freepik.com/free-psd/flyer-template-with-dog-food_23-2148514498.jpg",
//     title: "KHUY·∫æN M√ÉI 1/6 - MU√îN V√ÄN ∆ØU ƒê√ÉI CHO BOSS",
//     content: "üéâ Chi·∫øc deal khuy·∫øn m√£i s·ªëc v·ªõi mu√¥n v√†n ∆∞u ƒë√£i t·ª´ s·∫£n ph·∫©m dinh d∆∞·ª°ng, ƒë·ªì ch∆°i, ƒë·ªì d√πng sinh ho·∫°t!",
//     read: false,
//   },
//   {
//     id: 4,
//     img: "https://www.tiendauroi.com/wp-content/uploads/2019/07/9dc2c2985f7b96d5379542c522d887ec6c269c62.jpeg",
//     title: "KHUY·∫æN M√ÉI 1/6 - MU√îN V√ÄN ∆ØU ƒê√ÉI CHO BOSS",
//     content: "üì¢ V·ªõi v√¥ s·ªë gi·∫£m gi√°, quay s·ªë nh·∫≠n qu√† h√≥t h√≤n h·ªçn. C√≤n ch·∫ßn ch·ªù g√¨ kh√¥ng tham gia ngay!",
//     read: false,
//   },
// ];

// const reducer = (state, action) => {
//   switch (action.type) {
//     case "MARK_ALL_AS_READ":
//       return state.map((notification) => ({ ...notification, read: true }));
//     default:
//       return state;
//   }
// };

// const NotificationPage = () => {
//   const [notifications, dispatch] = useReducer(reducer, initdata);

//   // ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
//   const markAllAsRead = () => {
//     dispatch({ type: "MARK_ALL_AS_READ" });
//   };

//   // H√†m ki·ªÉm tra tr·∫°ng th√°i v√† tr·∫£ v·ªÅ l·ªõp CSS
//   const isRead = (read) => (read ? "notification read" : "notification unread");

//   return (
//     <div className="grid wide">
//       <div style={{ margin: "0 auto", padding: "20px" }} className="container">
//         <div className="notice-container">
//           <ProfileUser full_name="Nguy·ªÖn L√™ Thanh Huy·ªÅn" src_img={myAvatar} name="yurri_2506" />
//           <div className="content">
//             <div className="action-buttons">
//               <Button onClick={markAllAsRead} disabled={notifications.every((n) => n.read)}
//                 className="confirm-read-button">
//                 ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
//               </Button>
//             </div>
//             <div className="notifications">
//               {notifications.map((notification) => (
//                 <Card key={notification.id} className={isRead(notification.read)}>
//                   <Row>
//                     <Col span={4}>
//                       <img
//                         src={notification.img}
//                         alt="Notification"
//                         style={{ width: "100%", borderRadius: "5px" }}
//                       />
//                     </Col>
//                     <Col span={20}>
//                       <h6 className="notification-title">{notification.title}</h6>
//                       <p className="notification-content">{notification.content}</p>
//                     </Col>
//                   </Row>
//                 </Card>
//               ))}
//               {notifications.length === 0 && <p>Kh√¥ng c√≥ th√¥ng b√°o n√†o.</p>}
//             </div>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default NotificationPage;
import React, { useEffect, useState } from "react";
import { Button, Card, Col, Row, Spin, message } from "antd";
import order_img from "../../assets/images/order.png"; // H√¨nh ·∫£nh th√¥ng b√°o ƒë∆°n h√†ng
import voucher_img from "../../assets/images/voucher.png"; // H√¨nh ·∫£nh th√¥ng b√°o voucher
import product_img from "../../assets/images/product.png";
import user_img from '../../assets/images/user.webp'
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { getAllNotification, readNotify } from "../../services/Notification.service.js";
import UserProfileComponent from "../../components/UserProfileComponent/UserProfileComponent.jsx";
import styles from './NotificationPage.module.scss'
import './NotificationPage.scss'
import clsx from "clsx";

const NotificationPage = () => {
  const [loading, setLoading] = useState(true); // Tr·∫°ng th√°i loading
  const [error, setError] = useState(null); // Tr·∫°ng th√°i l·ªói
  const [notifications, setNotifications] = useState([]); // L∆∞u tr·ªØ th√¥ng b√°o
  const { _id, full_name, user_name, user_avt_img } = useSelector((state) => state.user);
  const access_token = localStorage.getItem("accessToken");
  const navigate = useNavigate();

  // L·∫•y th√¥ng b√°o t·ª´ API khi component mount
  useEffect(() => {
    const fetchNotifications = async () => {
      try {
        const res = await getAllNotification(_id, access_token);
        setNotifications(res.data || []);
        setLoading(false); // C·∫≠p nh·∫≠t tr·∫°ng th√°i khi d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i
      } catch (error) {
        setLoading(false);
        setError("L·ªói khi t·∫£i th√¥ng b√°o.");
        message.error("Kh√¥ng th·ªÉ t·∫£i th√¥ng b√°o.");
      }
    };

    fetchNotifications();
  }, [_id, access_token]); // L·∫•y l·∫°i th√¥ng b√°o khi _id ho·∫∑c access_token thay ƒë·ªïi

  // ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
  const markAllAsRead = async () => {
    try {
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong ·ª©ng d·ª•ng (React state)
      const updatedNotifications = notifications.map((notification) => ({
        ...notification,
        isRead: true,
      }));
      setNotifications(updatedNotifications);

      // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i 'isRead' tr√™n server (backend)
      const res = await Promise.all(
        updatedNotifications.map((notification) =>
          readNotify(_id, access_token, notification._id, { isRead: true })
        )
      );
      console.log("Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc:", res);
    } catch (error) {
      message.error("Kh√¥ng th·ªÉ ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc.");
    }
  };

  // H√†m ƒë·ªÉ l·∫•y h√¨nh ·∫£nh ƒë√∫ng theo lo·∫°i th√¥ng b√°o
  const getNotificationImage = (type) => {
    switch (type) {
      case "T√¨nh tr·∫°ng ƒë∆°n h√†ng":
        return order_img;
        break; // H√¨nh ·∫£nh th√¥ng b√°o ƒë∆°n h√†ng
      case "S·∫£n ph·∫©m":
        return product_img;
        break;// H√¨nh ·∫£nh th√¥ng b√°o s·∫£n ph·∫©m
      case "Khuy·∫øn m√£i":
        return voucher_img;
        break;
      case 'T√†i kho·∫£n':
        return user_img;
        break;
      default:
        return null;
    }
  };
  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o
  const handleNotificationClick = async (notification) => {
    try {

      // N·∫øu c·∫ßn g·ªçi API backend ƒë·ªÉ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc, th√™m t·∫°i ƒë√¢y
      if (!notification.isRead) {
        const res = await readNotify(_id, access_token, notification._id, { isRead: true });
        console.log(res)
      }
      // ƒêi·ªÅu h∆∞·ªõng ho·∫∑c th·ª±c hi·ªán h√†nh ƒë·ªông theo lo·∫°i th√¥ng b√°o
      switch (notification.notify_type) {
        case "T√¨nh tr·∫°ng ƒë∆°n h√†ng":
          navigate("/my-order"); // ƒêi·ªÅu h∆∞·ªõng t·ªõi trang chi ti·∫øt ƒë∆°n h√†ng
          break;
        case "S·∫£n ph·∫©m":
          navigate(`/product-details/${notification.product_id}`); // ƒêi·ªÅu h∆∞·ªõng t·ªõi trang chi ti·∫øt s·∫£n ph·∫©m
          break;
        case "Khuy·∫øn m√£i":
          navigate('/voucher');
          break;
        case 'T√†i kho·∫£n':
          navigate('/profile');
          break;
        default:
          message.info("Th√¥ng b√°o kh√¥ng c√≥ li√™n k·∫øt c·ª• th·ªÉ.");
      }
    } catch (error) {
      message.error("Kh√¥ng th·ªÉ ƒë√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc.");
    }
  };

  return (
    <div className="grid wide">
      <div className={styles.main}>
        <Row gutter={16}>
          <UserProfileComponent
            full_name={full_name}
            src_img={user_avt_img}
            user_name={user_name}
            className={styles.user}
          />
          <Col span={18} className={styles.noti}>
            <div className={styles.wrapBtn}>
              <Button
                onClick={markAllAsRead}
                disabled={notifications.every((n) => n.isRead)}
                className={styles.btn}
              >
                ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
              </Button>
            </div>
            <div>
              {notifications.map((notification) => (
                <div key={notification.id} className={styles.wrapNoti}>
                  <Card
                    className={clsx({
                      [styles.isRead]: notification.isRead,
                      [styles.isUnread]: !notification.isRead,
                    })}
                    onClick={() => handleNotificationClick(notification)}
                  >
                    <div className={styles.info}>
                      <img
                        src={getNotificationImage(notification.notify_type)} // Hi·ªÉn th·ªã h√¨nh ·∫£nh theo lo·∫°i th√¥ng b√°o
                        alt={notification.type}
                        className={styles.img}
                      />
                      <div className={styles.content}>
                        <h6>{notification.notify_title}</h6>
                        <p>{notification.notify_desc}</p>
                      </div>
                    </div>
                  </Card>
                </div>
              ))}

            </div>
          </Col>
        </Row>
      </div>
    </div>
  );
};

export default NotificationPage;
